plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
        id 'eclipse'
        id 'jacoco'
}

group = 'com.kxtract'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
        implementation 'org.dom4j:dom4j:2.0.2'
        implementation 'commons-io:commons-io:2.5'
	implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.228')
	implementation 'com.amazonaws:aws-java-sdk-s3'
	implementation 'com.amazonaws:aws-java-sdk-transcribe:1.11.691'

        // JAX-B dependencies for JDK 9+
        implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
        implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
}

test {
	useJUnitPlatform()
    	testLogging {
		events "passed", "skipped", "failed"
    	}
}
// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
	//Ensure we run the tests if calling this task
	dependsOn test
}
jacocoTestCoverageVerification {
	//Ensure we run the tests if calling this task
    	dependsOn test
        getSourceDirectories().setFrom(sourceSets.main.java.srcDirs)

        getExecutionData().setFrom(fileTree(dir: "${buildDir}/jacoco", include:["**/*.exec"]))
	violationRules {
		rule {
		    enabled = true
		    limit {
			counter = 'INSTRUCTION'
			value = 'COVEREDRATIO'
			minimum = 0.25
		    }
		}
	}
}
